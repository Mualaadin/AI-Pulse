import os
import json
import random

import nltk
import numpy as np

import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset


# Download required NLTK data (run once)
nltk.download('punkt', quiet=True)
nltk.download('wordnet', quiet=True)


class ChatbotModel(nn.Module):
    def __init__(self, input_size, output_size):
        super(ChatbotModel, self).__init__()
        self.fc1 = nn.Linear(input_size, 128)
        self.fc2 = nn.Linear(128, 64)
        self.fc3 = nn.Linear(64, output_size)
        self.relu = nn.ReLU()
        self.dropout = nn.Dropout(0.5)

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.dropout(x)
        x = self.relu(self.fc2(x))
        x = self.dropout(x)
        x = self.fc3(x)
        return x


class ChatbotAssistant:
    def __init__(self, intents_path, function_mappings=None):
        self.model = None
        self.intents_path = intents_path
        self.documents = []
        self.vocabulary = []
        self.intents = []
        self.intents_responses = {}
        self.function_mappings = function_mappings or {}
        self.X = None
        self.y = None

    @staticmethod
    def tokenize_and_lemmatize(text):
        lemmatizer = nltk.WordNetLemmatizer()
        words = nltk.word_tokenize(text)
        return [lemmatizer.lemmatize(word.lower()) for word in words]

    def bag_of_words(self, words):
        return [1 if word in words else 0 for word in self.vocabulary]

    def parse_intents(self):
        with open(self.intents_path, 'r', encoding='utf-8') as f:
            intents_data = json.load(f)

        for intent in intents_data['intents']:
            tag = intent['tag']
            if tag not in self.intents:
                self.intents.append(tag)
                self.intents_responses[tag] = intent['responses']

            for pattern in intent['patterns']:
                pattern_words = self.tokenize_and_lemmatize(pattern)
                self.vocabulary.extend(pattern_words)
                self.documents.append((pattern_words, tag))

        self.vocabulary = sorted(set(self.vocabulary))

    def prepare_data(self):
        bags = []
        labels = []

        for words, tag in self.documents:
            bag = self.bag_of_words(words)
            label = self.intents.index(tag)
            bags.append(bag)
            labels.append(label)

        self.X = np.array(bags, dtype=np.float32)
        self.y = np.array(labels, dtype=np.int64)

    def train_model(self, batch_size=8, lr=0.001, epochs=100):
        if self.X is None or self.y is None:
            raise ValueError("Call prepare_data() before training.")

        X_tensor = torch.tensor(self.X)
        y_tensor = torch.tensor(self.y)

        dataset = TensorDataset(X_tensor, y_tensor)
        loader = DataLoader(dataset, batch_size=batch_size, shuffle=True)

        self.model = ChatbotModel(self.X.shape[1], len(self.intents))
        criterion = nn.CrossEntropyLoss()
        optimizer = optim.Adam(self.model.parameters(), lr=lr)

        for epoch in range(epochs):
            total_loss = 0.0
            for batch_X, batch_y in loader:
                optimizer.zero_grad()
                outputs = self.model(batch_X)
                loss = criterion(outputs, batch_y)
                loss.backward()
                optimizer.step()
                total_loss += loss.item()
            avg_loss = total_loss / len(loader)
            print(f"Epoch {epoch + 1}/{epochs}, Loss: {avg_loss:.4f}")

    def save_model(self, model_path, dimensions_path):
        torch.save(self.model.state_dict(), model_path)
        with open(dimensions_path, 'w', encoding='utf-8') as f:
            json.dump({
                'input_size': self.X.shape[1],
                'output_size': len(self.intents)
            }, f)

    def load_model(self, model_path, dimensions_path):
        with open(dimensions_path, 'r', encoding='utf-8') as f:
            dims = json.load(f)

        self.model = ChatbotModel(dims['input_size'], dims['output_size'])
        self.model.load_state_dict(torch.load(model_path, map_location=torch.device('cpu'), weights_only=True))
        self.model.eval()

    def process_message(self, message):
        words = self.tokenize_and_lemmatize(message)
        bag = self.bag_of_words(words)
        bag_tensor = torch.tensor([bag], dtype=torch.float32)

        with torch.no_grad():
            output = self.model(bag_tensor)
            predicted_index = torch.argmax(output, dim=1).item()
            intent_tag = self.intents[predicted_index]

        # Execute function if mapped
        if intent_tag in self.function_mappings:
            self.function_mappings[intent_tag]()

        # Return random response
        responses = self.intents_responses.get(intent_tag, ["Sorry, I don't understand."])
        return random.choice(responses)


# Example function
def get_stocks():
    stocks = ['AAPL', 'META', 'NVDA', 'GS', 'MSFT']
    selected = random.sample(stocks, min(3, len(stocks)))
    print("Your stocks:", ", ".join(selected))


if __name__ == '__main__':
    INTENTS_FILE = 'intents.json'
    MODEL_FILE = 'chatbot_model.pth'
    DIMS_FILE = 'dimensions.json'

    # Option 1: Train and save (uncomment to retrain)
    # assistant = ChatbotAssistant(INTENTS_FILE, {'stocks': get_stocks})
    # assistant.parse_intents()
    # assistant.prepare_data()
    # assistant.train_model(epochs=200)
    # assistant.save_model(MODEL_FILE, DIMS_FILE)

    # Option 2: Load and run
    assistant = ChatbotAssistant(INTENTS_FILE, {'stocks': get_stocks})
    assistant.parse_intents()  # Needed to load intents_responses
    assistant.load_model(MODEL_FILE, DIMS_FILE)

    print("AI Pulse is ready! Type '/quit' to exit.")
    while True:
        user_input = input("You: ").strip()
        if user_input == '/quit':
            break
        response = assistant.process_message(user_input)
        print("AI Pulse:", response)